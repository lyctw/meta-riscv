From 501b56397fa0bf43d387f4ffbd110c4c11af7b15 Mon Sep 17 00:00:00 2001
From: Yu Chien Peter Lin <peterlin@andestech.com>
Date: Wed, 22 Nov 2023 11:24:49 +0800
Subject: [PATCH v8] !!!DROP!!! temp fix

Upstream-Status: Pending
---
 lib/sbi/sbi_pmu.c                        | 90 +++++++++++-------------
 platform/generic/andes/andes_pmu.c       |  1 +
 platform/generic/include/andes/andes45.h |  1 +
 3 files changed, 45 insertions(+), 47 deletions(-)

diff --git a/lib/sbi/sbi_pmu.c b/lib/sbi/sbi_pmu.c
index b204e32..8198d84 100644
--- a/lib/sbi/sbi_pmu.c
+++ b/lib/sbi/sbi_pmu.c
@@ -596,54 +596,50 @@ static int pmu_update_hw_mhpmevent(struct sbi_pmu_hw_event *hw_evt, int ctr_idx,
 	return 0;
 }
 
-<<<<<<< HEAD
-static int pmu_ctr_find_fixed_fw(unsigned long evt_idx_code)
-=======
-static int pmu_fixed_ctr_update_inhibit_bits(int fixed_ctr, unsigned long flags)
-{
-	struct sbi_scratch *scratch = sbi_scratch_thishart_ptr();
-	uint64_t cfg_val = 0, cfg_csr_no;
-#if __riscv_xlen == 32
-	uint64_t cfgh_csr_no;
-#endif
-	if (!sbi_hart_has_extension(scratch, SBI_HART_EXT_SMCNTRPMF) &&
-		!sbi_hart_has_extension(scratch, SBI_HART_EXT_XANDESPMU))
-		return fixed_ctr;
-
-	switch (fixed_ctr) {
-	case 0:
-		cfg_csr_no = CSR_MCYCLECFG;
-#if __riscv_xlen == 32
-		cfgh_csr_no = CSR_MCYCLECFGH;
-#endif
-		break;
-	case 2:
-		cfg_csr_no = CSR_MINSTRETCFG;
-#if __riscv_xlen == 32
-		cfgh_csr_no = CSR_MINSTRETCFGH;
-#endif
-		break;
-	default:
-		return SBI_EFAIL;
-	}
-
-	cfg_val |= MHPMEVENT_MINH;
-	if (sbi_hart_has_extension(scratch, SBI_HART_EXT_SMCNTRPMF)) {
-		pmu_update_inhibit_flags(flags, &cfg_val);
-#if __riscv_xlen == 32
-		csr_write_num(cfg_csr_no, cfg_val & 0xFFFFFFFF);
-		csr_write_num(cfgh_csr_no, cfg_val >> BITS_PER_LONG);
-#else
-		csr_write_num(cfg_csr_no, cfg_val);
-#endif
-	}
-	if (pmu_dev && pmu_dev->hw_counter_filter_mode)
-		pmu_dev->hw_counter_filter_mode(flags, fixed_ctr);
-	return fixed_ctr;
-}
+//static int pmu_fixed_ctr_update_inhibit_bits(int fixed_ctr, unsigned long flags)
+//{
+//	struct sbi_scratch *scratch = sbi_scratch_thishart_ptr();
+//	uint64_t cfg_val = 0, cfg_csr_no;
+//#if __riscv_xlen == 32
+//	uint64_t cfgh_csr_no;
+//#endif
+//	if (!sbi_hart_has_extension(scratch, SBI_HART_EXT_SMCNTRPMF) &&
+//		!sbi_hart_has_extension(scratch, SBI_HART_EXT_XANDESPMU))
+//		return fixed_ctr;
+//
+//	switch (fixed_ctr) {
+//	case 0:
+//		cfg_csr_no = 0;
+//#if __riscv_xlen == 32
+//		cfgh_csr_no = 0;
+//#endif
+//		break;
+//	case 2:
+//		cfg_csr_no = 0;
+//#if __riscv_xlen == 32
+//		cfgh_csr_no = 0;
+//#endif
+//		break;
+//	default:
+//		return SBI_EFAIL;
+//	}
+//
+//	cfg_val |= MHPMEVENT_MINH;
+//	if (sbi_hart_has_extension(scratch, SBI_HART_EXT_SMCNTRPMF)) {
+//		pmu_update_inhibit_flags(flags, &cfg_val);
+//#if __riscv_xlen == 32
+//		csr_write_num(cfg_csr_no, cfg_val & 0xFFFFFFFF);
+//		csr_write_num(cfgh_csr_no, cfg_val >> BITS_PER_LONG);
+//#else
+//		csr_write_num(cfg_csr_no, cfg_val);
+//#endif
+//	}
+//	if (pmu_dev && pmu_dev->hw_counter_filter_mode)
+//		pmu_dev->hw_counter_filter_mode(flags, fixed_ctr);
+//	return fixed_ctr;
+//}
 
 static int pmu_ctr_find_fixed_hw(unsigned long evt_idx_code)
->>>>>>> bd0a4cb (sbi: sbi_pmu: Add hw_counter_filter_mode() to pmu device)
 {
 	/* Non-programmables counters are enabled always. No need to do lookup */
 	if (evt_idx_code == SBI_PMU_HW_CPU_CYCLES)
@@ -671,7 +667,7 @@ static int pmu_ctr_find_hw(unsigned long cbase, unsigned long cmask, unsigned lo
 	 * If Sscof is present try to find the programmable counter for
 	 * cycle/instret as well.
 	 */
-	fixed_ctr = pmu_ctr_find_fixed_fw(event_idx);
+	fixed_ctr = pmu_ctr_find_fixed_hw(event_idx);
 	if (fixed_ctr >= 0 &&
 	    !sbi_hart_has_extension(scratch, SBI_HART_EXT_SSCOFPMF))
 		return fixed_ctr;
diff --git a/platform/generic/andes/andes_pmu.c b/platform/generic/andes/andes_pmu.c
index 9f1e796..2a95680 100644
--- a/platform/generic/andes/andes_pmu.c
+++ b/platform/generic/andes/andes_pmu.c
@@ -7,6 +7,7 @@
 #include <andes/andes_pmu.h>
 #include <sbi/sbi_bitops.h>
 #include <sbi/sbi_error.h>
+#include <sbi/sbi_scratch.h>
 #include <sbi/sbi_pmu.h>
 
 static void andes_hw_counter_enable_irq(uint32_t ctr_idx)
diff --git a/platform/generic/include/andes/andes45.h b/platform/generic/include/andes/andes45.h
index 01f63d4..4e7045b 100644
--- a/platform/generic/include/andes/andes45.h
+++ b/platform/generic/include/andes/andes45.h
@@ -42,6 +42,7 @@
 #define MIP_PMOVI			(1 << 18)
 
 #ifndef __ASSEMBLER__
+#include <sbi/riscv_asm.h>
 
 #define is_andes(series)				\
 ({							\
-- 
2.34.1

