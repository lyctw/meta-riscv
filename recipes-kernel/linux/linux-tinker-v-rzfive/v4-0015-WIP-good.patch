From 4a2cfba3c34f972d7b8f1f05d9d99f41a6728f89 Mon Sep 17 00:00:00 2001
From: Yu Chien Peter Lin <peterlin@andestech.com>
Date: Sat, 7 Oct 2023 16:49:06 +0800
Subject: [PATCH v4 15/18] WIP good

---
 arch/riscv/include/asm/alternative-macros.h |  2 +-
 arch/riscv/include/asm/alternative.h        |  6 +-
 arch/riscv/include/asm/hwcap.h              |  2 +
 arch/riscv/kernel/Makefile                  |  2 +-
 arch/riscv/kernel/alternative.c             |  2 +-
 arch/riscv/kernel/cpufeature.c              |  2 +
 drivers/perf/riscv_pmu_sbi.c                | 78 ++++++++++-----------
 7 files changed, 48 insertions(+), 46 deletions(-)

diff --git a/arch/riscv/include/asm/alternative-macros.h b/arch/riscv/include/asm/alternative-macros.h
index 51450b037a12..721ec275ce57 100644
--- a/arch/riscv/include/asm/alternative-macros.h
+++ b/arch/riscv/include/asm/alternative-macros.h
@@ -144,7 +144,7 @@
  * old_content: The old content which is probably replaced with new content.
  * new_content: The new content.
  * vendor_id: The CPU vendor ID.
- * patch_id: The patch ID (erratum ID, cpufeature ID or custom pmu ID).
+ * patch_id: The patch ID (erratum ID or cpufeature ID).
  * CONFIG_k: The Kconfig of this patch ID. When Kconfig is disabled, the old
  *	     content will always be executed.
  */
diff --git a/arch/riscv/include/asm/alternative.h b/arch/riscv/include/asm/alternative.h
index 1c10d82f1163..0a845e172912 100644
--- a/arch/riscv/include/asm/alternative.h
+++ b/arch/riscv/include/asm/alternative.h
@@ -43,7 +43,7 @@ struct alt_entry {
 	s32 alt_offset;		/* offset relative to replacement instruction or data */
 	u16 vendor_id;		/* CPU vendor ID */
 	u16 alt_len;		/* The replacement size */
-	u32 patch_id;		/* The patch ID (erratum ID, cpufeature ID or pmu ID) */
+	u32 patch_id;		/* The patch ID (erratum ID or cpufeature ID) */
 };
 
 void andes_errata_patch_func(struct alt_entry *begin, struct alt_entry *end,
@@ -62,8 +62,8 @@ void thead_feature_probe_func(unsigned int cpu, unsigned long archid,
 void riscv_cpufeature_patch_func(struct alt_entry *begin, struct alt_entry *end,
 				 unsigned int stage);
 
-void riscv_pmu_patch_func(struct alt_entry *begin, struct alt_entry *end,
-			  unsigned int stage);
+//void riscv_pmu_patch_func(struct alt_entry *begin, struct alt_entry *end,
+//			  unsigned int stage);
 
 #else /* CONFIG_RISCV_ALTERNATIVE */
 
diff --git a/arch/riscv/include/asm/hwcap.h b/arch/riscv/include/asm/hwcap.h
index b7b58258f6c7..b13fa3f5fd7c 100644
--- a/arch/riscv/include/asm/hwcap.h
+++ b/arch/riscv/include/asm/hwcap.h
@@ -58,6 +58,8 @@
 #define RISCV_ISA_EXT_ZICSR		40
 #define RISCV_ISA_EXT_ZIFENCEI		41
 #define RISCV_ISA_EXT_ZIHPM		42
+#define RISCV_ISA_EXT_XANDESPMU		43
+#define RISCV_ISA_EXT_XTHEADPMU		44
 
 #define RISCV_ISA_EXT_MAX		64
 
diff --git a/arch/riscv/kernel/Makefile b/arch/riscv/kernel/Makefile
index 506cc4a9a45a..bf756aa041ca 100644
--- a/arch/riscv/kernel/Makefile
+++ b/arch/riscv/kernel/Makefile
@@ -18,7 +18,7 @@ endif
 # cmodel=medany and notrace when patching early
 ifdef CONFIG_RISCV_ALTERNATIVE_EARLY
 CFLAGS_alternative.o := -mcmodel=medany
-CFLAGS_cpufeature.o := -mcmodel=medany
+CFLAGS_cpufeature.o := -mcmodel=medany -O0 -ggdb3
 ifdef CONFIG_FTRACE
 CFLAGS_REMOVE_alternative.o = $(CC_FLAGS_FTRACE)
 CFLAGS_REMOVE_cpufeature.o = $(CC_FLAGS_FTRACE)
diff --git a/arch/riscv/kernel/alternative.c b/arch/riscv/kernel/alternative.c
index 913897c244b3..5633457fe1d1 100644
--- a/arch/riscv/kernel/alternative.c
+++ b/arch/riscv/kernel/alternative.c
@@ -177,7 +177,7 @@ static void __init_or_module _apply_alternatives(struct alt_entry *begin,
 
 	riscv_cpufeature_patch_func(begin, end, stage);
 
-	riscv_pmu_patch_func(begin, end, stage);
+	//riscv_pmu_patch_func(begin, end, stage);
 
 	if (!cpu_mfr_info.patch_func)
 		return;
diff --git a/arch/riscv/kernel/cpufeature.c b/arch/riscv/kernel/cpufeature.c
index 6bd2f21e441a..1e4bb349e02d 100644
--- a/arch/riscv/kernel/cpufeature.c
+++ b/arch/riscv/kernel/cpufeature.c
@@ -175,6 +175,8 @@ const struct riscv_isa_ext_data riscv_isa_ext[] = {
 	__RISCV_ISA_EXT_DATA(svinval, RISCV_ISA_EXT_SVINVAL),
 	__RISCV_ISA_EXT_DATA(svnapot, RISCV_ISA_EXT_SVNAPOT),
 	__RISCV_ISA_EXT_DATA(svpbmt, RISCV_ISA_EXT_SVPBMT),
+	__RISCV_ISA_EXT_DATA(xandespmu, RISCV_ISA_EXT_XANDESPMU),
+	__RISCV_ISA_EXT_DATA(xtheadpmu, RISCV_ISA_EXT_XTHEADPMU),
 };
 
 const size_t riscv_isa_ext_count = ARRAY_SIZE(riscv_isa_ext);
diff --git a/drivers/perf/riscv_pmu_sbi.c b/drivers/perf/riscv_pmu_sbi.c
index 70ef817c14f8..5ec30515f9b4 100644
--- a/drivers/perf/riscv_pmu_sbi.c
+++ b/drivers/perf/riscv_pmu_sbi.c
@@ -28,10 +28,6 @@
 #include <asm/sbi.h>
 #include <asm/vendorid_list.h>
 
-#define PMU_PATCH_ID_THEAD	0
-#define PMU_PATCH_ID_ANDES	1
-#define PMU_PATCH_ID_MAX	2
-
 #define THEAD_C9XX_RV_IRQ_PMU		17
 #define THEAD_C9XX_CSR_SCOUNTEROF	0x5c5
 
@@ -43,10 +39,10 @@
 asm volatile(ALTERNATIVE_2(						\
 	"csrr %0, " __stringify(CSR_SSCOUNTOVF),			\
 	"csrr %0, " __stringify(THEAD_C9XX_CSR_SCOUNTEROF),		\
-		THEAD_VENDOR_ID, PMU_PATCH_ID_THEAD,			\
+		0, RISCV_ISA_EXT_XTHEADPMU,				\
 		CONFIG_THEAD_CUSTOM_PMU,				\
 	"csrr %0, " __stringify(ANDES_CSR_SCOUNTEROF),			\
-		ANDES_VENDOR_ID, PMU_PATCH_ID_ANDES,			\
+		0, RISCV_ISA_EXT_XANDESPMU,		\
 		CONFIG_ANDES_CUSTOM_PMU)				\
 	: "=r" (__ovl) :						\
 	: "memory")
@@ -55,7 +51,7 @@ asm volatile(ALTERNATIVE_2(						\
 asm volatile(ALTERNATIVE(						\
 	"csrc " __stringify(CSR_IP) ", %0\n\t",				\
 	"csrc " __stringify(ANDES_CSR_SLIP) ", %0\n\t",			\
-		ANDES_VENDOR_ID, PMU_PATCH_ID_ANDES,			\
+		0, RISCV_ISA_EXT_XANDESPMU,				\
 		CONFIG_ANDES_CUSTOM_PMU)				\
 	: : "r"(__irq_mask)						\
 	: "memory")
@@ -779,13 +775,15 @@ static int pmu_sbi_setup_irqs(struct riscv_pmu *pmu, struct platform_device *pde
 	if (riscv_isa_extension_available(NULL, SSCOFPMF)) {
 		riscv_pmu_irq_num = RV_IRQ_PMU;
 		riscv_pmu_use_irq = true;
-	} else if (IS_ENABLED(CONFIG_THEAD_CUSTOM_PMU) &&
+	} else if (riscv_isa_extension_available(NULL, XANDESPMU) &&
+		   IS_ENABLED(CONFIG_THEAD_CUSTOM_PMU) &&
 		   riscv_cached_mvendorid(0) == THEAD_VENDOR_ID &&
 		   riscv_cached_marchid(0) == 0 &&
 		   riscv_cached_mimpid(0) == 0) {
 		riscv_pmu_irq_num = THEAD_C9XX_RV_IRQ_PMU;
 		riscv_pmu_use_irq = true;
-	} else if (IS_ENABLED(CONFIG_ANDES_CUSTOM_PMU) &&
+	} else if (riscv_isa_extension_available(NULL, XANDESPMU) &&
+		   IS_ENABLED(CONFIG_ANDES_CUSTOM_PMU) &&
 		   riscv_cached_mvendorid(0) == ANDES_VENDOR_ID) {
 		riscv_pmu_irq_num = ANDES_SLI_CAUSE_BASE + ANDES_RV_IRQ_PMU;
 		riscv_pmu_use_irq = true;
@@ -992,34 +990,34 @@ static int __init pmu_sbi_devinit(void)
 }
 device_initcall(pmu_sbi_devinit)
 
-#ifdef CONFIG_RISCV_ALTERNATIVE
-void __init_or_module riscv_pmu_patch_func(struct alt_entry *begin,
-					   struct alt_entry *end,
-					   unsigned int stage)
-{
-	struct alt_entry *alt;
-	void *oldptr, *altptr;
-	u16 vendor_id = sbi_get_mvendorid();
-
-	if (riscv_isa_extension_available(NULL, SSCOFPMF)) // Check this on AX65
-		return;
-
-	if (stage == RISCV_ALTERNATIVES_EARLY_BOOT)
-		return;
-
-	for (alt = begin; alt < end; alt++) {
-		if (alt->vendor_id != vendor_id)
-			continue;
-
-		if (alt->patch_id >= PMU_PATCH_ID_MAX)
-			continue;
-
-		oldptr = ALT_OLD_PTR(alt);
-		altptr = ALT_ALT_PTR(alt);
-
-		mutex_lock(&text_mutex);
-		patch_text_nosync(oldptr, altptr, alt->alt_len);
-		mutex_unlock(&text_mutex);
-	}
-}
-#endif
+//#ifdef CONFIG_RISCV_ALTERNATIVE
+//void __init_or_module riscv_pmu_patch_func(struct alt_entry *begin,
+//					   struct alt_entry *end,
+//					   unsigned int stage)
+//{
+//	struct alt_entry *alt;
+//	void *oldptr, *altptr;
+//	u16 vendor_id = sbi_get_mvendorid();
+//
+//	if (riscv_isa_extension_available(NULL, SSCOFPMF)) // Check this on AX65
+//		return;
+//
+//	if (stage == RISCV_ALTERNATIVES_EARLY_BOOT)
+//		return;
+//
+//	for (alt = begin; alt < end; alt++) {
+//		if (alt->vendor_id != vendor_id)
+//			continue;
+//
+//		if (alt->patch_id >= PMU_PATCH_ID_MAX)
+//			continue;
+//
+//		oldptr = ALT_OLD_PTR(alt);
+//		altptr = ALT_ALT_PTR(alt);
+//
+//		mutex_lock(&text_mutex);
+//		patch_text_nosync(oldptr, altptr, alt->alt_len);
+//		mutex_unlock(&text_mutex);
+//	}
+//}
+//#endif
-- 
2.34.1

